!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/rgalmich/Documents/minishell/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
add_new_env_var	src/built_in/export.c	/^static void	add_new_env_var(char ***env, char *var)$/;"	f	typeref:typename:void	file:
add_or_update_env	src/built_in/export.c	/^void	add_or_update_env(char ***env, char *var)$/;"	f	typeref:typename:void
add_token	src/tokenisation/add_token.c	/^t_token	*add_token(t_lexer *lx, t_tokentype type, char *word)$/;"	f	typeref:typename:t_token *
append_cmd	src/parsing/parse_utils.c	/^void	append_cmd(t_cmd **head, t_cmd **last, t_cmd *cmd)$/;"	f	typeref:typename:void
append_part	src/tokenisation/tokenisation_utils.c	/^int	append_part(char **word, char *part)$/;"	f	typeref:typename:int
cd	src/built_in/cd.c	/^int	cd(char *path)$/;"	f	typeref:typename:int
copy_var_value	src/tokenisation/expand.c	/^int	copy_var_value(char *dst, const char *src, int *i, char **env)$/;"	f	typeref:typename:int
count_specials	src/parsing/parsing.c	/^static int	count_specials(t_token *line, t_token **last)$/;"	f	typeref:typename:int	file:
create_redir	src/parsing/parse_redir.c	/^static t_redir	*create_redir(t_token *tok)$/;"	f	typeref:typename:t_redir *	file:
echo	src/built_in/echo.c	/^int	echo(char **av, char **alloc_env)$/;"	f	typeref:typename:int
echo_print_env	src/built_in/echo.c	/^void	echo_print_env(char **av, int i, char **alloc_env)$/;"	f	typeref:typename:void
env	src/built_in/env.c	/^int	env(char **envp)$/;"	f	typeref:typename:int
errmsg	src/parsing/errmsg.c	/^int	errmsg(int special_count, t_token *line)$/;"	f	typeref:typename:int
execute_cmds	src/main.c	/^void	execute_cmds(t_cmd *cmds)$/;"	f	typeref:typename:void
execute_command	src/main.c	/^void	execute_command(t_cmd *cmd)$/;"	f	typeref:typename:void
expand_vars	src/tokenisation/expand.c	/^char	*expand_vars(const char *str, char **env, int expand)$/;"	f	typeref:typename:char *
export_no_args	src/built_in/export.c	/^void	export_no_args(char **env)$/;"	f	typeref:typename:void
extract_quoted_part	src/tokenisation/tokenisation.c	/^char	*extract_quoted_part(const char *line, int *i, char **env)$/;"	f	typeref:typename:char *
extract_unquoted_part	src/tokenisation/tokenisation.c	/^char	*extract_unquoted_part(const char *line, int *i, char **env)$/;"	f	typeref:typename:char *
find_env_var	src/built_in/export.c	/^static int	find_env_var(char **env, const char *var_name)$/;"	f	typeref:typename:int	file:
g_exit_status	src/main.c	/^int	g_exit_status = 0;$/;"	v	typeref:typename:int
get_env_value	src/built_in/echo.c	/^char	*get_env_value(char **env, const char *var)$/;"	f	typeref:typename:char *
get_input	src/minishell_loop.c	/^char	*get_input(const char *prompt)$/;"	f	typeref:typename:char *
get_part	src/tokenisation/tokenisation_utils.c	/^int	get_part(const char *line, int *i, char **part, char **env)$/;"	f	typeref:typename:int
handle_operator	src/tokenisation/tokenisation_utils.c	/^int	handle_operator(const char *line, int i, t_lexer *lx)$/;"	f	typeref:typename:int
handle_specials	src/parsing/parsing.c	/^int	handle_specials(t_token **line)$/;"	f	typeref:typename:int
init_env	src/init_env.c	/^char	**init_env(char **envp)$/;"	f	typeref:typename:char **
is_operator_char	src/tokenisation/tokenisation_utils.c	/^int	is_operator_char(char c)$/;"	f	typeref:typename:int
lexer_init	src/main.c	/^void	lexer_init(t_lexer *lx)$/;"	f	typeref:typename:void
main	src/main.c	/^int	main(int argc, char **argv, char **envp)$/;"	f	typeref:typename:int
parse_all	src/parsing/parsing.c	/^t_cmd	*parse_all(t_token **line_ptr)$/;"	f	typeref:typename:t_cmd *
parse_command	src/parsing/parse_command.c	/^t_cmd	*parse_command(t_token **current)$/;"	f	typeref:typename:t_cmd *
parse_redirections	src/parsing/parse_redir.c	/^void	parse_redirections(t_token **current, t_cmd *cmd,$/;"	f	typeref:typename:void
parser	src/parsing/parsing.c	/^t_cmd	*parser(t_lexer *lx)$/;"	f	typeref:typename:t_cmd *
process_and_append	src/parsing/parsing.c	/^int	process_and_append(t_token **line_ptr, t_cmd **head,$/;"	f	typeref:typename:int
process_line	src/main.c	/^static void	process_line(t_lexer *lx, char *line, char **env)$/;"	f	typeref:typename:void	file:
process_redir_entry	src/parsing/parse_redir.c	/^static int	process_redir_entry(t_token **current, t_cmd *cmd,$/;"	f	typeref:typename:int	file:
pwd	src/built_in/pwd.c	/^int	pwd(void)$/;"	f	typeref:typename:int
redir_apply_in	src/parsing/parse_redir.c	/^void	redir_apply_in(t_redir *r)$/;"	f	typeref:typename:void
redir_apply_out	src/parsing/parse_redir.c	/^void	redir_apply_out(t_redir *r)$/;"	f	typeref:typename:void
set_token_props	src/tokenisation/add_token.c	/^static int	set_token_props(t_token *new, t_tokentype type, char *word)$/;"	f	typeref:typename:int	file:
setup_redirections	src/parsing/parse_command.c	/^void	setup_redirections(t_cmd *cmd)$/;"	f	typeref:typename:void
skip_spaces	src/tokenisation/tokenisation_utils.c	/^void	skip_spaces(const char *line, int *i)$/;"	f	typeref:typename:void
token_type_to_str	src/tokenisation/token_type_to_str.c	/^char	*token_type_to_str(t_tokentype type)$/;"	f	typeref:typename:char *
tokenize	src/tokenisation/tokenisation.c	/^t_token	*tokenize(const char *line, t_lexer *lx, char **env)$/;"	f	typeref:typename:t_token *
tokenize_word	src/tokenisation/tokenisation.c	/^int	tokenize_word(const char *line, int *i, t_lexer *lx, char **env)$/;"	f	typeref:typename:int
unset	src/built_in/unset.c	/^void	unset(char ***env, char **args)$/;"	f	typeref:typename:void
unset_var	src/built_in/unset.c	/^void	unset_var(char ***env, char *var)$/;"	f	typeref:typename:void
unset_var2	src/built_in/unset.c	/^static void	unset_var2(char **env, char *var, char **new_env)$/;"	f	typeref:typename:void	file:
update_existing_env	src/built_in/export.c	/^static void	update_existing_env(char ***env, int idx, char *var)$/;"	f	typeref:typename:void	file:
wait_for_child	src/execution/execution.c	/^void	wait_for_child(pid_t pid)$/;"	f	typeref:typename:void
